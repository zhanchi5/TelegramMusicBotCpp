#include "RequestManager.hpp"
#include <tgbot/tgbot.h>
#include <signal.h>
#include <stdio.h>

/*#include "json.hpp"
#include <cstdlib>
#include <cstring>
#include <ctime>
#include <curl/curl.h>
#include <exception>
#include <fstream>
#include <iostream>
#include <vector>
using nlohmann::json;*/

int fileSize;

/*static void getJSON(char *url, char *filename) {
  CURL *curl;              // указатель на объект cURL
  curl = curl_easy_init(); // запуск "легкого" хэндлера
  CURLcode res;            // объект класса cURLcode

  if (curl) {
    struct curl_slist *chunk = NULL; // список на ноль
    chunk = curl_slist_append(
        chunk,
        "User-Agent: David"); // кастомный хэдер USERAGENT в список хэдеров
    res = curl_easy_setopt(curl, CURLOPT_HTTPHEADER,
                           chunk); // список отправляется в хэдер запроса
    curl_easy_setopt(curl, CURLOPT_URL, url); // ссылка, по которой обращаемся
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYPEER, 0L);
    curl_easy_setopt(curl, CURLOPT_SSL_VERIFYHOST, 0L);
    FILE *pF;
    pF = fopen(filename, "wb");
    curl_easy_setopt(curl, CURLOPT_WRITEDATA,
                     pF); // команда на копирование данных в файл

    res = curl_easy_perform(curl); // выполнение запросов

    if (res != CURLE_OK) // проверка
      fprintf(stderr, "Could not download file: %s\n", curl_easy_strerror(res));
    else
      printf("SUCCESS: File has been dowloaded\n");

    rewind(pF);
    fseek(pF, 0, SEEK_END);
    fileSize = ftell(pF); // получение размера файла
    curl_easy_cleanup(curl);
    fclose(pF);
  }
}

std::string formattedJson(char *json, unsigned int files_or_commits) {
  std::string pretty;

  if (json == NULL || strlen(json) == 0) {
    return pretty;
  }

  std::string str = std::string(json);
  bool quoted = false;
  bool escaped = false;
  std::string INDENT = "    ";
  int indent = 0;
  int length = (int)str.length();
  int i;

  for (i = 0; i < length; i++) {
    char ch = str[i];

    switch (ch) {
    case '{':
    case '[':
      pretty += ch;

      if (!quoted) {
        pretty += "\n";

        if (!(str[i + 1] == '}' || str[i + 1] == ']')) {
          ++indent;

          for (int j = 0; j < indent; j++) {
            pretty += INDENT;
          }
        }
      }

      break;

    case '}':
    case ']':
      if (!quoted) {
        if ((i > 0) && (!(str[i - 1] == '{' || str[i - 1] == '['))) {
          pretty += "\n";

          --indent;

          for (int j = 0; j < indent; j++) {
            pretty += INDENT;
          }
        } else if ((i > 0) && ((str[i - 1] == '[' && ch == ']') ||
                               (str[i - 1] == '{' && ch == '}'))) {
          for (int j = 0; j < indent; j++) {
            pretty += INDENT;
          }
        }
      }

      pretty += ch;

      break;

    case '"':
      pretty += ch;
      escaped = false;

      if (i > 0 && str[i - 1] == '\\') {
        escaped = !escaped;
      }

      if (!escaped) {
        quoted = !quoted;
      }

      break;

    case ',':
      pretty += ch;

      if (!quoted) {
        pretty += "\n";

        for (int j = 0; j < indent; j++) {
          pretty += INDENT;
        }
      }

      break;

    case ':':
      pretty += ch;

      if (!quoted) {
        pretty += " ";
      }

      break;
    default:
      pretty += ch;

      break;
    }
  }
  return pretty;
}

void toJSON(json &j, char *filename, unsigned int files_or_commits) {
  std::ifstream fromFile(filename);
  char *line = new char[fileSize];
  while (!fromFile.eof()) {
    for (unsigned int i = 0; i <= fileSize; ++i) {
      fromFile >> line[i];
    }
  }
  fromFile.close();

  std::ofstream toFile(filename);
  toFile << formattedJson(line, files_or_commits);
  toFile.close();

  std::ifstream finFile(filename);
  j << finFile;

  finFile.close();
}
*/
using namespace std;
using namespace TgBot;

bool sigintGot = false;

int main() {
  std::string telegram_api_key =
      "377205379:AAEmGRAfTEBASf1tE7pevGok0oYLJENUa8Y";
  Bot bot(telegram_api_key);
  /*InlineKeyboardMarkup::Ptr keyboard(new InlineKeyboardMarkup);
  vector<InlineKeyboardButton::Ptr> row0;
  vector<InlineKeyboardButton::Ptr> row1;
  InlineKeyboardButton::Ptr checkButton(new InlineKeyboardButton);
  InlineKeyboardButton::Ptr topButton(new InlineKeyboardButton);
  topButton->text = "top";
  topButton->callbackData = "top";
  row1.push_back(topButton);
  keyboard->inlineKeyboard.push_back(row1);
  checkButton->text = "check";
  checkButton->callbackData = "check";
  row0.push_back(checkButton);
  keyboard->inlineKeyboard.push_back(row0);

  bot.getEvents().onAnyMessage([&bot, &keyboard](Message::Ptr message){
    bot.getApi().sendMessage(message->chat->id, "Make it useful");
  });

  bot.getEvents().onCommand("check", [&bot, &keyboard](Message::Ptr message) {
    string response = "Choose command";
    bot.getApi().sendMessage(message->chat->id, response, false, 0, keyboard,
                             "Markdown");
    bot.getApi().sendMessage(message->chat->id, top, false, 0, keyboard, "Markdown");
  });*/


  bot.getEvents().onAnyMessage([&bot](Message::Ptr message) {
    RequestManager manager;
    manager.RequestHandle(bot, message, message->text, message->text);
  });

  bot.getEvents().onCommand("top", [&bot](Message::Ptr message) {
    /*bot.getApi().sendMessage(message->chat->id,
                             "This command sends top 50 tracks on charts");
    CURL *curl = curl_easy_init();
    json buf;
    CURLcode res;
    if (curl) {
      struct curl_slist *chunk = NULL;
      chunk = curl_slist_append(chunk, "User-Agent: Chrome");
      std::vector<std::string> v;
      res = curl_easy_perform(curl);
      curl_easy_cleanup(curl);
      getJSON("http://ws.audioscrobbler.com/2.0/"
              "?method=chart.gettoptracks&api_key="
              "34cbc3c5bcdc5f4bbabbd1037f67b870&page=1&format=json",
              "file.json");
      std::cout << "Formatting file" << std::endl;
      toJSON(buf, "file.json", 1);
      std::ifstream ifile("file.json");
      std::cout << "Parsing file" << std::endl;
      json j = json::parse(ifile);
      unsigned int i = 0;
      std::cout << "Generating message" << std::endl;
      for (auto &track : j["tracks"]["track"]) {
        v.push_back(track["name"]);
        v[i] += " ";
        v[i] += track["url"];
        i++;
      }
      std::string la = v[0];
      v[0].clear();
      for (auto &i : v) {
        v[0] += i;
        v[0] += "\n";
      }
      v[0] += la;
      v.resize(1);
      bot.getApi().sendMessage(message->chat->id, v[0]);
      bot.getApi().sendMessage(message->chat->id, "End of command operation");
    }*/

  });

  /*bot.getEvents().onCommand("artist", [&bot](Message::Ptr message) {
    bot.getApi().sendMessage(message->chat->id,
                             "This command sends info about artist by request");
    bot.getApi().sendMessage(message->chat->id, "Send artist`s name");
    bot.getEvents().onAnyMessage([&bot](Message::Ptr message) {
      CURL *curl = curl_easy_init();
      json buf;
      CURLcode res;
      if (curl) {
        struct curl_slist *chunk = NULL;
        chunk = curl_slist_append(chunk, "User-Agent: Chrome");
        res = curl_easy_perform(curl);
        curl_easy_cleanup(curl);
        std::string base_url =
            "http://ws.audioscrobbler.com/2.0/?method=artist.getinfo&artist=";
        std::string api_format =
            "&api_key=34cbc3c5bcdc5f4bbabbd1037f67b870&format=json";
        std::string tmp = base_url + message->text + api_format;
        std::cout << tmp << std::endl;
        getJSON((char *)tmp.c_str(), "file.json");
        std::ifstream ifile("file.json");
        json j = json::parse(ifile);
        for (auto &line : j["artist"]["bio"]["summary"]) {
          bot.getApi().sendMessage(message->chat->id, line);
        }
        bot.getApi().sendMessage(message->chat->id, "End of command operation");
      }
    });
  });

  bot.getEvents().onCommand("tracks", [&bot](Message::Ptr message) {
    bot.getApi().sendMessage(message->chat->id,
                             "This command returns list of tracks of artist");
    bot.getApi().sendMessage(message->chat->id, "Send artist`s name");
    bot.getEvents().onAnyMessage([&bot](Message::Ptr message) {
      CURL *curl = curl_easy_init();
      json buf;
      CURLcode res;
      if (curl) {
        struct curl_slist *chunk = NULL;
        chunk = curl_slist_append(chunk, "User-Agent: Chrome");
        res = curl_easy_perform(curl);
        curl_easy_cleanup(curl);
        std::string base_url = "http://ws.audioscrobbler.com/2.0/"
                               "?method=user.getartisttracks&user=rj&artist=";
        std::string api_format =
            "&api_key=34cbc3c5bcdc5f4bbabbd1037f67b870&format=json";
        std::string tmp = base_url + message->text + api_format;
        std::cout << tmp << std::endl;
        getJSON((char *)tmp.c_str(), "file.json");
        std::vector<std::string> tracks;
        std::ifstream ifile("file.json");
        json j = json::parse(ifile);
        std::cout << "Generating message" << std::endl;
        unsigned int k = 0;
        for (auto &line : j["artisttracks"]["track"]) {
          tracks.push_back(line["name"]);
          tracks[k] += " ";
          tracks[k] += line["url"];
          k++;
        }
        std::string la = tracks[0];
        tracks[0].clear();
        for (auto &i : tracks) {
          tracks[0] += i;
          tracks[0] += "\n";
        }
        tracks[0] += la;
        tracks.resize(1);
        bot.getApi().sendMessage(message->chat->id, tracks[0]);
        bot.getApi().sendMessage(message->chat->id, "End of command operation");
      }
    });
  });

  bot.getEvents().onCommand("video", [&bot](Message::Ptr message) {
    bot.getApi().sendMessage(
        message->chat->id,
        "This command returns link to requested music video on YouTube");
    bot.getApi().sendMessage(message->chat->id, "Send song title");
    bot.getEvents().onAnyMessage([&bot](Message::Ptr message) {
      CURL *curl = curl_easy_init();
      json buf;
      CURLcode res;
      if (curl) {
        struct curl_slist *chunk = NULL;
        chunk = curl_slist_append(chunk, "User-Agent: Chrome");
        res = curl_easy_perform(curl);
        curl_easy_cleanup(curl);
        std::string base_url =
            "https://www.googleapis.com/youtube/v3/search?key=";
        std::string api_format = "&part=snippet&q=";
        std::string youtube_api = "AIzaSyCh93dy15Ql-AGA0OA3ynfc5R5KbwuVI7g";
        std::string youtube_base = "https://www.youtube.com/watch?v=";
        std::transform(message->text.begin(), message->text.end(),
                       message->text.begin(),
                       [](char ch) { return ch == ' ' ? '+' : ch; });
        std::string tmp = base_url + youtube_api + api_format + message->text;
        std::cout << tmp << std::endl;
        getJSON((char *)tmp.c_str(), "file.json");
        std::vector<std::string> tracks;
        std::ifstream ifile("file.json");
        json j = json::parse(ifile);
        std::cout << "Generating link" << std::endl;
        std::vector<std::string> link;
        link.push_back(youtube_base);
        link.push_back(j["items"][0]["id"]["videoId"]);
        link[0] += link[1];
        link.resize(1);
        bot.getApi().sendMessage(message->chat->id, link[0]);
        bot.getApi().sendMessage(message->chat->id, "End of command operation");
      }
    });
  });
  bot.getEvents().onCallbackQuery([&bot, &keyboard](CallbackQuery::Ptr query) {
		if (StringTools::startsWith(query->data, "check")) {
			string response = "ok";
			bot.getApi().sendMessage(query->message->chat->id, response, false, 0, keyboard, "Markdown");
		}
	});*/


  // BUG: не работает InlineKeyboard
  signal(SIGINT, [](int s) {
    printf("SIGINT got");
    sigintGot = true;
  });
  try {
    printf("Bot username: %s\n", bot.getApi().getMe()->username.c_str());

    TgLongPoll longPoll(bot);
    while (!sigintGot) {
      printf("Long poll started\n");
      longPoll.start();
    }
  } catch (exception &e) {
    printf("error: %s\n", e.what());
  }
  return 0;
}
